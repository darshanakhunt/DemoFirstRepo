package com.qa.ExtentReportListener;

import java.io.File;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.testng.IReporter;
import org.testng.IResultMap;
import org.testng.ISuite;
import org.testng.ISuiteResult;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.xml.XmlSuite;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;

public class ExtentReportListener implements IReporter {

    private ExtentReports extent;

    public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {
        // Initialize the ExtentReports object with an HTML reporter.
        ExtentHtmlReporter htmlReporter = new ExtentHtmlReporter(outputDirectory + File.separator + "ExtentReport.html");
        extent = new ExtentReports();
        extent.attachReporter(htmlReporter);

        for (ISuite suite : suites) {
            Map<String, ISuiteResult> result = suite.getResults();

            // Loop through the suite results and build test nodes for passed, failed, and skipped tests.
            for (ISuiteResult r : result.values()) {
                ITestContext context = r.getTestContext();

                // Create nodes for passed, failed, and skipped tests
                buildTestNodes(context.getPassedTests(), Status.PASS);
                buildTestNodes(context.getFailedTests(), Status.FAIL);
                buildTestNodes(context.getSkippedTests(), Status.SKIP);
            }
        }

        // Flush the extent report after all the tests are processed
        extent.flush();
    }

    private void buildTestNodes(IResultMap tests, Status status) {
        if (tests.size() > 0) {
            for (ITestResult result : tests.getAllResults()) {
                // Start a new test in the report for each result
                ExtentTest test = extent.createTest(result.getMethod().getMethodName());

                // Set the start and end time of the test
                test.setStartedTime(getTime(result.getStartMillis()));
                test.setEndedTime(getTime(result.getEndMillis()));

                // Assign categories to the test if any
                for (String group : result.getMethod().getGroups()) {
                    test.assignCategory(group);
                }

                // Log either an exception or a success message
                if (result.getThrowable() != null) {
                    test.log(status, result.getThrowable());
                } else {
                    test.log(status, "Test " + status.toString().toLowerCase() + "ed");
                }

                // End the test in the report
                extent.flush(); // Ensure the report is written
            }
        }
    }

    private Date getTime(long millis) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(millis);
        return calendar.getTime();
    }
}
